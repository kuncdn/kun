syntax = "proto3";

package proto;

option go_package = "api";

message InfoReq {
  string Id = 1; // 后端的应用可以通过http header account-id 读取到用户的ID
}

message InfoResp {
  string Id = 1;
  string Email = 2;
}

message AnnotationReq { string Id = 1; }

message AnnotationResp {
  bool Ok = 1;
  bytes Value = 2;
}

message PatchAnnotationReq {
  string Id = 1;
  bytes Value = 2;
}

message PatchAnnotationResp {
  bool Ok = 1;        // 操作成功OK为True
  string Message = 2; // 若OK为false，则该字段内容为错误详细原因
}

message PermissionReq {
  string Route = 1;  // HTTP路由
  string Token = 2;  // Bear Token 认证参数
  string Method = 3; // HTTP方法
}

enum RetCodeType {
  NO_MATCHED_API = 0;    // 匹配不到任何记录
  LOGIN_REQUIRED = 1;    // Token 无效或者未提供token
  PERMISSION_DENIED = 2; // 权限不足
  ALLOW_ACCESS = 3;      // 允许访问
}

message PermissionResp {
  string Id = 1;           // 认证通过返回该用户的ID
  RetCodeType RetCode = 2; // 认证通过OK为True
  string Message = 3;      // 则该字段内容为错误详细原因
}

service Account {
  // 读取用户详情
  rpc FetchUserInfo(InfoReq) returns (InfoResp);
  // 验证用户权限
  rpc ValidateUserPermission(PermissionReq) returns (PermissionResp);
  // 读取用户Annotation
  rpc FetchUserAnnotation(AnnotationReq) returns (AnnotationResp);
  // 修改用户Annotation
  rpc PatchUserAnnotation(PatchAnnotationReq) returns (PatchAnnotationResp);
}
